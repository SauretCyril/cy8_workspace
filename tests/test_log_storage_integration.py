#!/usr/bin/env python3
"""
Test d'int√©gration : Analyser le log et v√©rifier la persistance

Teste le workflow complet :
1. Analyser un log ComfyUI
2. V√©rifier que les r√©sultats sont stock√©s dans la base
3. Changer d'environnement et revenir
4. V√©rifier que les r√©sultats persistent
"""

import sys
import os
import tempfile

# Ajouter le r√©pertoire src au path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "..", "src"))


def test_log_storage_persistence():
    """Test de persistance des r√©sultats d'analyse"""
    print("üîÑ Test de persistance des r√©sultats d'analyse")
    print("=" * 45)

    try:
        from cy8_database_manager import cy8_database_manager

        # Cr√©er une base temporaire
        temp_db = tempfile.NamedTemporaryFile(suffix=".db", delete=False)
        temp_db_path = temp_db.name
        temp_db.close()

        print(f"üìÅ Base temporaire: {temp_db_path}")

        # Initialiser la base
        db_manager = cy8_database_manager(temp_db_path)
        db_manager.init_database(mode="dev")

        # Cr√©er deux environnements de test
        env1_id = "ENV_TEST_01"
        env2_id = "ENV_TEST_02"

        for env_id, env_name in [
            (env1_id, "Environment 1"),
            (env2_id, "Environment 2"),
        ]:
            db_manager.cursor.execute(
                """
                INSERT INTO environnements (id, name, path, description)
                VALUES (?, ?, ?, ?)
                """,
                (
                    env_id,
                    env_name,
                    f"/test/{env_id.lower()}",
                    f"Test environment {env_id}",
                ),
            )
        db_manager.conn.commit()

        print(f"üåç Environnements cr√©√©s: {env1_id}, {env2_id}")

        # Ajouter des r√©sultats d'analyse pour ENV1
        results_env1 = [
            ("error", "critical", "Failed to load custom node A"),
            ("warning", "model", "Model checkpoint missing"),
            ("info", "startup", "ComfyUI started successfully"),
        ]

        for type_result, niveau, message in results_env1:
            db_manager.add_analysis_result(
                environment_id=env1_id,
                fichier="comfyui_env1.log",
                type_result=type_result,
                niveau=niveau,
                message=message,
                details=f"Details for {message}",
            )

        # Ajouter des r√©sultats d'analyse pour ENV2
        results_env2 = [
            ("error", "fatal", "Critical error in ENV2"),
            ("info", "model", "Model loaded in ENV2"),
        ]

        for type_result, niveau, message in results_env2:
            db_manager.add_analysis_result(
                environment_id=env2_id,
                fichier="comfyui_env2.log",
                type_result=type_result,
                niveau=niveau,
                message=message,
                details=f"Details for {message}",
            )

        print(
            f"üíæ R√©sultats ajout√©s: {len(results_env1)} pour {env1_id}, {len(results_env2)} pour {env2_id}"
        )

        # Test 1: R√©cup√©rer les r√©sultats pour ENV1
        stored_env1 = db_manager.get_analysis_results(env1_id)
        print(f"üìä R√©sultats ENV1: {len(stored_env1)} trouv√©s")

        if len(stored_env1) == len(results_env1):
            print("‚úÖ Test 1: Nombre correct de r√©sultats pour ENV1")
        else:
            print(f"‚ùå Test 1: Attendu {len(results_env1)}, obtenu {len(stored_env1)}")
            return False

        # Test 2: R√©cup√©rer les r√©sultats pour ENV2
        stored_env2 = db_manager.get_analysis_results(env2_id)
        print(f"üìä R√©sultats ENV2: {len(stored_env2)} trouv√©s")

        if len(stored_env2) == len(results_env2):
            print("‚úÖ Test 2: Nombre correct de r√©sultats pour ENV2")
        else:
            print(f"‚ùå Test 2: Attendu {len(results_env2)}, obtenu {len(stored_env2)}")
            return False

        # Test 3: V√©rifier l'isolation entre environnements
        # Les r√©sultats d'ENV1 ne doivent pas contenir ceux d'ENV2
        env1_messages = {result[5] for result in stored_env1}  # message en position 5
        env2_messages = {result[5] for result in stored_env2}

        if env1_messages.isdisjoint(env2_messages):
            print("‚úÖ Test 3: Isolation entre environnements correcte")
        else:
            print("‚ùå Test 3: Contamination crois√©e d√©tect√©e")
            print(f"   Intersection: {env1_messages & env2_messages}")
            return False

        # Test 4: R√©cup√©rer tous les r√©sultats
        all_results = db_manager.get_analysis_results()
        expected_total = len(results_env1) + len(results_env2)

        if len(all_results) == expected_total:
            print("‚úÖ Test 4: R√©cup√©ration globale correcte")
        else:
            print(
                f"‚ùå Test 4: Total attendu {expected_total}, obtenu {len(all_results)}"
            )
            return False

        # Test 5: Nettoyage s√©lectif
        db_manager.clear_analysis_results(env1_id)
        remaining_env1 = db_manager.get_analysis_results(env1_id)
        remaining_env2 = db_manager.get_analysis_results(env2_id)

        if len(remaining_env1) == 0 and len(remaining_env2) == len(results_env2):
            print("‚úÖ Test 5: Nettoyage s√©lectif r√©ussi")
        else:
            print(
                f"‚ùå Test 5: Nettoyage √©chou√© - ENV1: {len(remaining_env1)}, ENV2: {len(remaining_env2)}"
            )
            return False

        # Afficher quelques exemples de donn√©es
        print(f"\nüìã Exemple de donn√©es ENV2:")
        for result in remaining_env2[:2]:
            print(f"   Type: {result[3]}, Niveau: {result[4]}, Message: {result[5]}")

        # Nettoyage
        db_manager.close()
        os.unlink(temp_db_path)

        print("\nüéâ TOUS LES TESTS DE PERSISTANCE R√âUSSIS !")
        return True

    except Exception as e:
        print(f"‚ùå Erreur lors du test de persistance: {e}")
        import traceback

        traceback.print_exc()
        return False


def test_complete_workflow():
    """Test du workflow complet d'analyse avec stockage"""
    print("\nüîÑ Test du workflow complet")
    print("=" * 30)

    try:
        # Ce test simule le workflow complet sans interface graphique
        from cy8_database_manager import cy8_database_manager

        # √âtape 1: Pr√©parer la base
        temp_db = tempfile.NamedTemporaryFile(suffix=".db", delete=False)
        temp_db_path = temp_db.name
        temp_db.close()

        db_manager = cy8_database_manager(temp_db_path)
        db_manager.init_database(mode="dev")

        # √âtape 2: Cr√©er un environnement
        env_id = "WORKFLOW_TEST"
        db_manager.cursor.execute(
            "INSERT INTO environnements (id, name, path, description) VALUES (?, ?, ?, ?)",
            (env_id, "Workflow Test", "/test/workflow", "Complete workflow test"),
        )
        db_manager.conn.commit()

        print(f"‚úÖ Environnement cr√©√©: {env_id}")

        # √âtape 3: Simuler une analyse de log qui produit des r√©sultats
        log_entries = [
            {
                "type": "error",
                "level": "high",
                "msg": "Custom node failed",
                "details": "Node XYZ",
            },
            {
                "type": "warning",
                "level": "medium",
                "msg": "Deprecated function",
                "details": "Function ABC",
            },
            {
                "type": "info",
                "level": "low",
                "msg": "Processing complete",
                "details": "All done",
            },
        ]

        stored_count = 0
        for entry in log_entries:
            success = db_manager.add_analysis_result(
                environment_id=env_id,
                fichier="test_workflow.log",
                type_result=entry["type"],
                niveau=entry["level"],
                message=entry["msg"],
                details=entry["details"],
            )
            if success:
                stored_count += 1

        print(f"üíæ Stockage: {stored_count}/{len(log_entries)} r√©sultats sauvegard√©s")

        # √âtape 4: V√©rifier la r√©cup√©ration
        retrieved = db_manager.get_analysis_results(env_id)

        if len(retrieved) == len(log_entries):
            print("‚úÖ R√©cup√©ration: Nombre correct de r√©sultats")
        else:
            print(f"‚ùå R√©cup√©ration √©chou√©e: {len(retrieved)}/{len(log_entries)}")
            return False

        # √âtape 5: V√©rifier la structure des donn√©es
        first_result = retrieved[0]
        expected_fields = (
            8  # id, env_id, fichier, type, niveau, message, details, timestamp
        )

        if len(first_result) == expected_fields:
            print("‚úÖ Structure: Format de donn√©es correct")
        else:
            print(
                f"‚ùå Structure incorrecte: {len(first_result)} champs au lieu de {expected_fields}"
            )
            return False

        # Nettoyage
        db_manager.close()
        os.unlink(temp_db_path)

        print("‚úÖ Workflow complet valid√© !")
        return True

    except Exception as e:
        print(f"‚ùå Erreur workflow: {e}")
        return False


def main():
    """Fonction principale de test"""
    print("üöÄ Test d'int√©gration : Analyse de log avec persistance")
    print("=" * 55)

    success_count = 0
    total_tests = 2

    # Test 1: Persistance des donn√©es
    if test_log_storage_persistence():
        success_count += 1
        print("‚úÖ Test 1 R√âUSSI - Persistance des donn√©es")
    else:
        print("‚ùå Test 1 √âCHOU√â")

    # Test 2: Workflow complet
    if test_complete_workflow():
        success_count += 1
        print("‚úÖ Test 2 R√âUSSI - Workflow complet")
    else:
        print("‚ùå Test 2 √âCHOU√â")

    # R√©sum√© final
    print(f"\nüéØ R√âSUM√â FINAL:")
    print(f"   Tests r√©ussis: {success_count}/{total_tests}")
    print(f"   Taux de r√©ussite: {(success_count/total_tests)*100:.1f}%")

    if success_count == total_tests:
        print("\nüéâ INT√âGRATION R√âUSSIE !")
        print("‚úÖ Le stockage des r√©sultats d'analyse fonctionne parfaitement")
        print("‚úÖ Les r√©sultats persistent entre les sessions")
        print("‚úÖ L'isolation entre environnements est assur√©e")
        print("‚úÖ Le workflow complet est op√©rationnel")
        print("\nüí° Maintenant vous pouvez :")
        print("   ‚Ä¢ Analyser un log avec 'Analyser le log'")
        print("   ‚Ä¢ Voir les r√©sultats dans le tableau")
        print("   ‚Ä¢ Retrouver les r√©sultats apr√®s red√©marrage")
        print("   ‚Ä¢ Changer d'environnement et garder l'historique")
        return True
    else:
        print("\n‚ùå PROBL√àMES D'INT√âGRATION")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
