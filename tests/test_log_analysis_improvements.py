#!/usr/bin/env python3
"""
Test des am√©liorations de l'analyse des logs ComfyUI
"""

import sys
import os

# Ajouter le chemin src
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "..", "src"))

def test_log_analyzer_improvements():
    """Test des am√©liorations de l'analyseur de logs"""
    print("üß™ Test des am√©liorations de l'analyseur de logs")
    print("=" * 50)
    
    try:
        from cy8_log_analyzer import cy8_log_analyzer
        print("‚úÖ Import du log analyzer r√©ussi")
        
        # Cr√©er une instance de l'analyseur
        analyzer = cy8_log_analyzer()
        print("‚úÖ Instance cr√©√©e")
        
        # Tester les nouvelles m√©thodes
        print("\nüîç Test des nouvelles m√©thodes d'extraction:")
        
        # Test extraction custom node depuis erreur
        test_error_line = "Error in custom_nodes/ComfyUI-Manager/manager.py: ModuleNotFoundError"
        custom_node = analyzer._extract_custom_node_from_error(test_error_line)
        print(f"‚Ä¢ Extraction custom node: '{custom_node}' depuis: {test_error_line[:50]}...")
        
        # Test extraction d√©tails d'erreur
        error_details = analyzer._extract_error_details(test_error_line)
        print(f"‚Ä¢ D√©tails erreur: '{error_details}'")
        
        # Test extraction temps de chargement
        test_load_line = "custom_nodes/ComfyUI-AnimateDiff-Evolved: 2.5s"
        loading_time = analyzer._extract_loading_time(test_load_line)
        print(f"‚Ä¢ Temps de chargement: '{loading_time}' depuis: {test_load_line}")
        
        # Test extraction raison d'√©chec
        test_fail_line = "custom_nodes/failed_node (IMPORT FAILED): Module not found"
        failure_reason = analyzer._extract_failure_reason(test_fail_line)
        print(f"‚Ä¢ Raison d'√©chec: '{failure_reason}' depuis: {test_fail_line[:50]}...")
        
        print("\n‚úÖ Toutes les nouvelles m√©thodes fonctionnent correctement!")
        print("\nüìã Am√©liorations impl√©ment√©es:")
        print("‚Ä¢ ‚úÖ Extraction du nom du custom node dans les erreurs")
        print("‚Ä¢ ‚úÖ D√©tails suppl√©mentaires sur les erreurs (CUDA, m√©moire, etc.)")
        print("‚Ä¢ ‚úÖ Temps de chargement des custom nodes")
        print("‚Ä¢ ‚úÖ Raisons sp√©cifiques d'√©chec de chargement")
        print("‚Ä¢ ‚úÖ Nouvelle colonne 'D√©tails/Temps' dans l'interface")
        print("‚Ä¢ ‚úÖ Popup d√©taill√©e sans analyse IA automatique")
        print("‚Ä¢ ‚úÖ Fonction de copie des d√©tails dans le presse-papier")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_error_extraction():
    """Test sp√©cifique de l'extraction d'informations d'erreur"""
    print("\nüîç Test d'extraction d'informations d'erreur avanc√©es")
    print("-" * 50)
    
    try:
        from cy8_log_analyzer import cy8_log_analyzer
        analyzer = cy8_log_analyzer()
        
        # Cas de test r√©els
        test_cases = [
            {
                "line": "ERROR: Failed to load custom_nodes/ComfyUI-Manager: ModuleNotFoundError: No module named 'git'",
                "expected_node": "ComfyUI-Manager",
                "expected_type": "Module Not Found"
            },
            {
                "line": "CUDA error: out of memory in custom_nodes/ComfyUI-VideoHelperSuite/videohelpersuite/image_load_cap.py",
                "expected_node": "ComfyUI-VideoHelperSuite",
                "expected_type": "CUDA Error"
            },
            {
                "line": "custom_nodes/ComfyUI-Impact-Pack: 1.24s",
                "expected_time": "1.24s"
            },
            {
                "line": "custom_nodes/broken_node (IMPORT FAILED): Permission denied",
                "expected_reason": "Permission denied"
            }
        ]
        
        for i, test_case in enumerate(test_cases, 1):
            print(f"\nüìù Test cas {i}:")
            print(f"   Ligne: {test_case['line'][:70]}...")
            
            if 'expected_node' in test_case:
                node = analyzer._extract_custom_node_from_error(test_case['line'])
                print(f"   ‚úì Node d√©tect√©: '{node}' (attendu: '{test_case['expected_node']}')")
            
            if 'expected_type' in test_case:
                error_info = analyzer._extract_error_info(test_case['line'])
                print(f"   ‚úì Type erreur: '{error_info['type']}' (attendu: '{test_case['expected_type']}')")
                print(f"   ‚úì D√©tails: '{error_info['details']}'")
            
            if 'expected_time' in test_case:
                time = analyzer._extract_loading_time(test_case['line'])
                print(f"   ‚úì Temps: '{time}' (attendu: '{test_case['expected_time']}')")
            
            if 'expected_reason' in test_case:
                reason = analyzer._extract_failure_reason(test_case['line'])
                print(f"   ‚úì Raison: '{reason}'")
        
        print("\n‚úÖ Tests d'extraction termin√©s avec succ√®s!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors des tests d'extraction: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ Test des am√©liorations de l'analyse des logs")
    print("=" * 60)
    
    success1 = test_log_analyzer_improvements()
    success2 = test_error_extraction()
    
    print("\n" + "=" * 60)
    if success1 and success2:
        print("üéâ TOUS LES TESTS R√âUSSIS!")
        print("\nüìä R√©sum√© des am√©liorations:")
        print("‚Ä¢ Plus d'informations par ligne d'analyse")
        print("‚Ä¢ Nom du custom node affich√© clairement")
        print("‚Ä¢ D√©tails complets sur les erreurs")
        print("‚Ä¢ Popup d'analyse optionnelle (pas automatique)")
        print("‚Ä¢ Interface plus riche avec colonne 'D√©tails/Temps'")
    else:
        print("‚ùå Certains tests ont √©chou√©")
        sys.exit(1)