#!/usr/bin/env python3
"""
Test du nouvel onglet ComfyUI et du bouton de test de connexion
"""

import os
import sys
import tkinter as tk
import tempfile

# Ajouter le chemin src au PYTHONPATH
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "..", "src"))

from cy8_prompts_manager_main import cy8_prompts_manager


def test_comfyui_tab_creation():
    """Test de la cr√©ation de l'onglet ComfyUI"""
    print("üß™ Test de cr√©ation de l'onglet ComfyUI...")

    root = tk.Tk()
    root.withdraw()  # Cacher la fen√™tre

    try:
        app = cy8_prompts_manager(root=root)

        # V√©rifier que la m√©thode setup_comfyui_tab existe
        assert hasattr(
            app, "setup_comfyui_tab"
        ), "La m√©thode setup_comfyui_tab doit exister"
        print("   ‚úÖ M√©thode setup_comfyui_tab trouv√©e")

        # V√©rifier que la m√©thode test_comfyui_connection existe
        assert hasattr(
            app, "test_comfyui_connection"
        ), "La m√©thode test_comfyui_connection doit exister"
        print("   ‚úÖ M√©thode test_comfyui_connection trouv√©e")

        # V√©rifier que les widgets de l'onglet ComfyUI existent
        assert hasattr(app, "test_connection_btn"), "Le bouton de test doit exister"
        assert hasattr(app, "status_icon_label"), "L'ic√¥ne de statut doit exister"
        assert hasattr(app, "status_text_label"), "Le texte de statut doit exister"
        assert hasattr(app, "details_frame"), "Le frame des d√©tails doit exister"
        assert hasattr(app, "details_text"), "La zone de texte des d√©tails doit exister"
        print("   ‚úÖ Tous les widgets de l'onglet ComfyUI sont pr√©sents")

        # V√©rifier l'√©tat initial
        initial_icon = app.status_icon_label.cget("text")
        initial_text = app.status_text_label.cget("text")
        print(f"   üìç √âtat initial - Ic√¥ne: {initial_icon}, Texte: {initial_text}")

        print("‚úÖ Test de cr√©ation de l'onglet ComfyUI r√©ussi !")
        return True

    except Exception as e:
        print(f"‚ùå Erreur dans le test: {e}")
        return False
    finally:
        root.destroy()


def test_connection_button_state():
    """Test de l'√©tat du bouton de connexion"""
    print("\nüß™ Test de l'√©tat du bouton de connexion...")

    root = tk.Tk()
    root.withdraw()

    try:
        app = cy8_prompts_manager(root=root)

        # V√©rifier l'√©tat initial du bouton
        initial_state = app.test_connection_btn.cget("state")
        initial_text = app.test_connection_btn.cget("text")

        print(f"   üìç Bouton - √âtat: {initial_state}, Texte: {initial_text}")

        # Le bouton doit √™tre actif initialement
        assert (
            str(initial_state) == "normal"
        ), f"Le bouton doit √™tre actif, trouv√©: {initial_state}"
        assert (
            "Tester la connexion" in initial_text
        ), f"Le texte doit contenir 'Tester la connexion', trouv√©: {initial_text}"

        print("‚úÖ Test de l'√©tat du bouton r√©ussi !")
        return True

    except Exception as e:
        print(f"‚ùå Erreur dans le test: {e}")
        return False
    finally:
        root.destroy()


def test_interface_elements():
    """Test des √©l√©ments d'interface de l'onglet ComfyUI"""
    print("\nüß™ Test des √©l√©ments d'interface...")

    root = tk.Tk()
    root.withdraw()

    try:
        app = cy8_prompts_manager(root=root)

        # V√©rifier que les √©l√©ments sont correctement configur√©s
        server_info = os.getenv("COMFYUI_SERVER", "127.0.0.1:8188")
        print(f"   üìç Serveur configur√©: {server_info}")

        # V√©rifier que le frame des d√©tails n'est pas visible initialement
        details_visible = app.details_frame.winfo_viewable()
        print(f"   üìç D√©tails techniques visibles: {details_visible}")

        # Le frame des d√©tails ne doit pas √™tre visible au d√©part
        assert (
            not details_visible
        ), "Le frame des d√©tails ne doit pas √™tre visible initialement"

        print("‚úÖ Test des √©l√©ments d'interface r√©ussi !")
        return True

    except Exception as e:
        print(f"‚ùå Erreur dans le test: {e}")
        return False
    finally:
        root.destroy()


def main():
    """Lancer tous les tests de l'onglet ComfyUI"""
    print("=" * 60)
    print("üß™ TESTS DE L'ONGLET COMFYUI")
    print("   Nouveau syst√®me de test de connexion dans l'interface")
    print("=" * 60)

    success = True

    # Test 1: Cr√©ation de l'onglet
    if not test_comfyui_tab_creation():
        success = False

    # Test 2: √âtat du bouton
    if not test_connection_button_state():
        success = False

    # Test 3: √âl√©ments d'interface
    if not test_interface_elements():
        success = False

    print("\n" + "=" * 60)
    if success:
        print("üéâ TOUS LES TESTS R√âUSSIS !")
        print("   L'onglet ComfyUI est pr√™t √† l'emploi.")
        print("\nüí° Pour tester la connexion :")
        print("   1. python src/cy8_prompts_manager_main.py")
        print("   2. S√©lectionnez un prompt")
        print("   3. Onglet 'ComfyUI' -> 'Tester la connexion'")
    else:
        print("‚ùå CERTAINS TESTS ONT √âCHOU√â")
        sys.exit(1)
    print("=" * 60)


if __name__ == "__main__":
    main()
