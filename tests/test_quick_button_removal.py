#!/usr/bin/env python3
"""
Test rapide de suppression du bouton "Analyser environnement s√©lectionn√©"

V√©rifie uniquement le contenu du fichier sans lancer l'application graphique.
"""

import sys
import os


def test_button_removal_in_file():
    """Test de suppression du bouton dans le fichier"""
    print("üß™ Test de suppression du bouton 'Analyser environnement s√©lectionn√©'")
    print("=" * 65)

    try:
        file_path = os.path.join(
            os.path.dirname(__file__), "..", "src", "cy8_prompts_manager_main.py"
        )

        with open(file_path, "r", encoding="utf-8") as f:
            content = f.read()

        tests_passed = 0
        total_tests = 4

        # Test 1: V√©rifier que le texte du bouton n'existe plus
        print("\nüîç Test 1: V√©rification suppression du bouton...")
        if "Analyser environnement s√©lectionn√©" in content:
            print("‚ùå Le texte du bouton existe encore dans le fichier")
        else:
            print("‚úÖ Le texte du bouton a √©t√© supprim√© du fichier")
            tests_passed += 1

        # Test 2: V√©rifier que la m√©thode analyze_selected_environment n'existe plus
        print(
            "\nüîç Test 2: V√©rification suppression de analyze_selected_environment..."
        )
        if "def analyze_selected_environment(" in content:
            print("‚ùå La m√©thode analyze_selected_environment existe encore")
        else:
            print("‚úÖ La m√©thode analyze_selected_environment a √©t√© supprim√©e")
            tests_passed += 1

        # Test 3: V√©rifier que simulate_log_analysis n'existe plus
        print("\nüîç Test 3: V√©rification suppression de simulate_log_analysis...")
        if "def simulate_log_analysis(" in content:
            print("‚ùå La m√©thode simulate_log_analysis existe encore")
        else:
            print("‚úÖ La m√©thode simulate_log_analysis a √©t√© supprim√©e")
            tests_passed += 1

        # Test 4: V√©rifier que les m√©thodes importantes existent toujours
        print("\nüîç Test 4: V√©rification des m√©thodes importantes...")

        required_methods = [
            "def refresh_environments(",
            "def on_environment_select(",
            "def load_environment_analysis_results(",
            "def analyze_comfyui_log(",
            "def identify_comfyui_environment(",
        ]

        all_present = True
        for method_signature in required_methods:
            if method_signature in content:
                method_name = method_signature.split("(")[0].replace("def ", "")
                print(f"  ‚úÖ {method_name}")
            else:
                method_name = method_signature.split("(")[0].replace("def ", "")
                print(f"  ‚ùå {method_name}")
                all_present = False

        if all_present:
            tests_passed += 1
            print("‚úÖ Toutes les m√©thodes importantes sont pr√©sentes")
        else:
            print("‚ùå Certaines m√©thodes importantes manquent")

        # R√©sum√©
        print(f"\nüéØ R√âSUM√â:")
        print(f"   Tests r√©ussis: {tests_passed}/{total_tests}")
        print(f"   Taux de r√©ussite: {(tests_passed/total_tests)*100:.1f}%")

        if tests_passed == total_tests:
            print("\nüèÜ SUPPRESSION R√âUSSIE !")
            print("‚úÖ Le bouton 'Analyser environnement s√©lectionn√©' a √©t√© supprim√©")
            print("‚úÖ Les m√©thodes associ√©es ont √©t√© supprim√©es")
            print("‚úÖ Les m√©thodes importantes sont conserv√©es")
            print("\nüí° Maintenant, seul l'environnement identifi√© peut √™tre analys√©")
            return True
        else:
            print("\n‚ùå PROBL√àMES D√âTECT√âS")
            return False

    except Exception as e:
        print(f"‚ùå Erreur lors de la lecture du fichier: {e}")
        import traceback

        traceback.print_exc()
        return False


def test_code_consistency():
    """Test de coh√©rence du code apr√®s suppression"""
    print("\nüìã Test de coh√©rence du code...")

    try:
        file_path = os.path.join(
            os.path.dirname(__file__), "..", "src", "cy8_prompts_manager_main.py"
        )

        with open(file_path, "r", encoding="utf-8") as f:
            content = f.read()

        # V√©rifier qu'il n'y a pas de r√©f√©rences orphelines
        orphan_checks = [
            (
                "self.analyze_selected_environment",
                "R√©f√©rence orpheline √† analyze_selected_environment",
            ),
            (
                "self.simulate_log_analysis",
                "R√©f√©rence orpheline √† simulate_log_analysis",
            ),
        ]

        all_clean = True
        for check, description in orphan_checks:
            if check in content:
                print(f"‚ùå {description}")
                all_clean = False
            else:
                print(f"‚úÖ Pas de {description.lower()}")

        # V√©rifier que la structure setup_log_tab est coh√©rente
        if "def setup_log_tab(" in content:
            print("‚úÖ La m√©thode setup_log_tab existe")

            # Extraire la m√©thode setup_log_tab
            start_marker = "def setup_log_tab("
            start_pos = content.find(start_marker)
            if start_pos != -1:
                # Trouver la fin de la m√©thode (prochaine def au m√™me niveau d'indentation)
                method_content = content[start_pos:]
                lines = method_content.split("\n")
                method_lines = [lines[0]]  # La ligne de d√©finition

                for i, line in enumerate(lines[1:], 1):
                    if line.strip() == "":
                        method_lines.append(line)
                    elif line.startswith("    "):  # Contenu de la m√©thode (indentation)
                        method_lines.append(line)
                    elif line.startswith("def ") and not line.startswith(
                        "        "
                    ):  # Nouvelle m√©thode
                        break
                    else:
                        method_lines.append(line)

                method_text = "\n".join(method_lines)

                # V√©rifier que Canvas est bien utilis√©
                if "Canvas(" in method_text and "Scrollbar(" in method_text:
                    print("‚úÖ Canvas et Scrollbar sont pr√©sents dans setup_log_tab")
                else:
                    print("‚ö†Ô∏è Canvas ou Scrollbar pourrait manquer dans setup_log_tab")
                    all_clean = False
        else:
            print("‚ùå La m√©thode setup_log_tab manque")
            all_clean = False

        return all_clean

    except Exception as e:
        print(f"‚ùå Erreur lors du test de coh√©rence: {e}")
        return False


def main():
    """Fonction principale de test rapide"""
    print("üöÄ Test rapide de suppression du bouton d'analyse d'environnement")
    print("=" * 60)

    success1 = test_button_removal_in_file()
    success2 = test_code_consistency()

    if success1 and success2:
        print("\nüéâ TOUS LES TESTS R√âUSSIS !")
        print("‚úÖ La suppression a √©t√© effectu√©e correctement")
        print("‚úÖ Le code reste coh√©rent")
        print("\nüìù R√âSUM√â DES MODIFICATIONS:")
        print("   ‚Ä¢ Bouton 'Analyser environnement s√©lectionn√©' supprim√©")
        print("   ‚Ä¢ M√©thode analyze_selected_environment() supprim√©e")
        print("   ‚Ä¢ M√©thode simulate_log_analysis() supprim√©e")
        print("   ‚Ä¢ M√©thodes importantes conserv√©es")
        print("   ‚Ä¢ Interface Log avec Canvas/Scrollbar maintenue")
        return True
    else:
        print("\n‚ùå √âCHEC DES TESTS")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
