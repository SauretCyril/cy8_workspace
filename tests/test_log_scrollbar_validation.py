#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test final de validation de la barre de d√©filement de l'onglet Log

V√©rifie que toutes les fonctionnalit√©s sont op√©rationnelles apr√®s l'ajout
de la barre de d√©filement globale.
"""

import unittest
import sys
import os

# Configuration de l'encodage pour Windows
if os.name == "nt":  # Windows
    import codecs

    sys.stdout = codecs.getwriter("utf-8")(sys.stdout.buffer, "strict")
    sys.stderr = codecs.getwriter("utf-8")(sys.stderr.buffer, "strict")

# Ajouter le r√©pertoire src au path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "..", "src"))


class TestLogTabScrollbar(unittest.TestCase):
    """Tests pour la barre de d√©filement de l'onglet Log"""

    @classmethod
    def setUpClass(cls):
        """Configuration une seule fois pour tous les tests"""
        print("üß™ Tests de validation de la barre de d√©filement - Onglet Log")
        print("=" * 60)

    def setUp(self):
        """Configuration avant chaque test"""
        # √âviter l'affichage de l'interface
        import tkinter as tk

        self.root = tk.Tk()
        self.root.withdraw()

    def tearDown(self):
        """Nettoyage apr√®s chaque test"""
        try:
            self.root.destroy()
        except:
            pass

    def test_application_import(self):
        """Test 1: V√©rifier que l'application peut √™tre import√©e"""
        print("üì¶ Test 1: Import de l'application...")
        try:
            from cy8_prompts_manager_main import cy8_prompts_manager

            print("  ‚úÖ Import r√©ussi")
            self.assertTrue(True)
        except ImportError as e:
            print(f"  ‚ùå Erreur d'import: {e}")
            self.fail(f"Impossible d'importer l'application: {e}")

    def test_log_tab_creation(self):
        """Test 2: V√©rifier que l'onglet Log peut √™tre cr√©√©"""
        print("üèóÔ∏è Test 2: Cr√©ation de l'onglet Log...")
        try:
            from cy8_prompts_manager_main import cy8_prompts_manager
            import tkinter as tk
            from tkinter import ttk

            app = cy8_prompts_manager()
            test_frame = ttk.Frame(self.root)

            # Cr√©er l'onglet Log
            app.setup_log_tab(test_frame)

            print("  ‚úÖ Onglet Log cr√©√© avec succ√®s")
            self.assertTrue(hasattr(app, "log_results_tree"))
            self.assertTrue(hasattr(app, "environments_tree"))

        except Exception as e:
            print(f"  ‚ùå Erreur lors de la cr√©ation: {e}")
            self.fail(f"Impossible de cr√©er l'onglet Log: {e}")

    def test_canvas_and_scrollbar(self):
        """Test 3: V√©rifier la pr√©sence du Canvas et de la scrollbar"""
        print("üñºÔ∏è Test 3: V√©rification Canvas et Scrollbar...")
        try:
            from cy8_prompts_manager_main import cy8_prompts_manager
            import tkinter as tk
            from tkinter import ttk

            app = cy8_prompts_manager()
            test_frame = ttk.Frame(self.root)

            # Cr√©er l'onglet Log
            app.setup_log_tab(test_frame)

            # V√©rifier la pr√©sence d'un Canvas (pour la scrollbar)
            canvas_found = False
            scrollbar_found = False

            def find_widgets(widget):
                nonlocal canvas_found, scrollbar_found

                if isinstance(widget, tk.Canvas):
                    canvas_found = True
                elif isinstance(widget, ttk.Scrollbar):
                    scrollbar_found = True

                try:
                    for child in widget.winfo_children():
                        find_widgets(child)
                except:
                    pass

            find_widgets(test_frame)

            print(f"  Canvas trouv√©: {'‚úÖ' if canvas_found else '‚ùå'}")
            print(f"  Scrollbar trouv√©e: {'‚úÖ' if scrollbar_found else '‚ùå'}")

            self.assertTrue(canvas_found, "Canvas pour scrollbar non trouv√©")
            self.assertTrue(scrollbar_found, "Scrollbar non trouv√©e")

        except Exception as e:
            print(f"  ‚ùå Erreur lors de la v√©rification: {e}")
            self.fail(f"Erreur Canvas/Scrollbar: {e}")

    def test_key_methods_exist(self):
        """Test 4: V√©rifier que les m√©thodes cl√©s existent"""
        print("üîß Test 4: V√©rification des m√©thodes cl√©s...")
        try:
            from cy8_prompts_manager_main import cy8_prompts_manager

            app = cy8_prompts_manager()

            required_methods = [
                "setup_log_tab",
                "analyze_comfyui_log",
                "refresh_log_analysis",
                "filter_log_results",
                "refresh_environments",
                "on_environment_select",
                "check_log_file_status",
                "update_analysis_buttons_state",
            ]

            missing_methods = []
            for method_name in required_methods:
                if hasattr(app, method_name):
                    print(f"  ‚úÖ {method_name}")
                else:
                    print(f"  ‚ùå {method_name}")
                    missing_methods.append(method_name)

            if missing_methods:
                self.fail(f"M√©thodes manquantes: {missing_methods}")

        except Exception as e:
            print(f"  ‚ùå Erreur lors de la v√©rification des m√©thodes: {e}")
            self.fail(f"Erreur m√©thodes: {e}")

    def test_environment_integration(self):
        """Test 5: V√©rifier l'int√©gration avec les environnements"""
        print("üåç Test 5: Int√©gration environnements...")
        try:
            from cy8_prompts_manager_main import cy8_prompts_manager

            app = cy8_prompts_manager()

            # V√©rifier les attributs d'environnement
            self.assertTrue(hasattr(app, "current_environment_id"))
            self.assertTrue(hasattr(app, "set_current_environment"))
            self.assertTrue(hasattr(app, "update_analysis_buttons_state"))

            print("  ‚úÖ Attributs d'environnement pr√©sents")
            print("  ‚úÖ M√©thodes d'environnement pr√©sentes")

        except Exception as e:
            print(f"  ‚ùå Erreur environnements: {e}")
            self.fail(f"Erreur environnements: {e}")


def run_tests():
    """Ex√©cuter tous les tests"""
    # Configuration de unittest pour √™tre plus verbeux
    unittest.main(argv=[""], exit=False, verbosity=0)


if __name__ == "__main__":
    try:
        # Cr√©er une suite de tests
        loader = unittest.TestLoader()
        suite = loader.loadTestsFromTestCase(TestLogTabScrollbar)

        # Ex√©cuter les tests
        runner = unittest.TextTestRunner(verbosity=0, stream=sys.stdout)
        result = runner.run(suite)

        # R√©sum√© final
        print(f"\nüéØ R√âSUM√â FINAL:")
        print(f"   Tests ex√©cut√©s: {result.testsRun}")
        print(
            f"   ‚úÖ R√©ussites: {result.testsRun - len(result.failures) - len(result.errors)}"
        )
        print(f"   ‚ùå √âchecs: {len(result.failures)}")
        print(f"   üí• Erreurs: {len(result.errors)}")

        if result.wasSuccessful():
            print(
                f"\nüèÜ TOUS LES TESTS PASS√âS - La barre de d√©filement fonctionne correctement!"
            )
            sys.exit(0)
        else:
            print(f"\n‚ùå CERTAINS TESTS ONT √âCHOU√â")
            sys.exit(1)

    except Exception as e:
        print(f"‚ùå Erreur lors de l'ex√©cution des tests: {e}")
        sys.exit(1)
