#!/usr/bin/env python3
"""
Test de l'analyse globale du log avec le nouveau bouton.
"""

import os
import sys
import tkinter as tk
from tkinter import ttk

# Ajouter le r√©pertoire src au path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

def test_global_log_analysis():
    """Test de l'analyse globale du log avec le nouveau bouton"""
    print("üß™ Test de l'analyse globale du log avec le nouveau bouton")
    print("=" * 60)

    try:
        from cy8_prompts_manager_main import cy8_prompts_manager

        print("‚úÖ Import de cy8_prompts_manager r√©ussi")

        # Cr√©er l'application
        app = cy8_prompts_manager()
        print("‚úÖ Application cr√©√©e")

        # V√©rifier que le bouton d'analyse IA globale existe
        if hasattr(app, 'ai_analyze_btn'):
            print("‚úÖ Bouton d'analyse IA globale trouv√©")
            print(f"   Text: {app.ai_analyze_btn.cget('text')}")
        else:
            print("‚ùå Bouton d'analyse IA globale non trouv√©")

        # V√©rifier que la m√©thode d'analyse globale existe
        if hasattr(app, 'analyze_complete_log_global'):
            print("‚úÖ M√©thode analyze_complete_log_global trouv√©e")
        else:
            print("‚ùå M√©thode analyze_complete_log_global non trouv√©e")

        # V√©rifier que les m√©thodes obsol√®tes ont √©t√© supprim√©es
        obsolete_methods = [
            'analyze_complete_log_with_ai',
            'display_log_analysis',
            'display_analysis_error',
            'save_log_analysis'
        ]

        for method in obsolete_methods:
            if hasattr(app, method):
                print(f"‚ö†Ô∏è  M√©thode obsol√®te encore pr√©sente: {method}")
            else:
                print(f"‚úÖ M√©thode obsol√®te supprim√©e: {method}")

        # V√©rifier que la m√©thode show_log_detail est simplifi√©e
        if hasattr(app, 'show_log_detail'):
            print("‚úÖ M√©thode show_log_detail pr√©sente (fen√™tre d√©tails simple)")
        else:
            print("‚ùå M√©thode show_log_detail manquante")

        # V√©rifier l'existence du module Mistral
        try:
            from cy8_mistral import analyze_comfyui_log_complete
            print("‚úÖ Fonction analyze_comfyui_log_complete disponible")
        except ImportError as e:
            print(f"‚ùå Fonction analyze_comfyui_log_complete non disponible: {e}")

        print("\nüéØ R√©sum√© des fonctionnalit√©s:")
        print("   ‚Ä¢ Double-clic sur ligne d'erreur ‚Üí D√©tails simples (sans IA)")
        print("   ‚Ä¢ Bouton 'ü§ñ Analyse IA compl√®te' ‚Üí Analyse globale du log")
        print("   ‚Ä¢ M√™me question et r√¥le pour Mistral AI")
        print("   ‚Ä¢ Analyse du log complet au lieu d'erreurs individuelles")

        # Fermer l'application
        app.root.quit()
        app.root.destroy()

        print("\n‚úÖ Test termin√© avec succ√®s!")
        return True

    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_global_log_analysis()
    if success:
        print("\nüéâ Tous les tests sont pass√©s!")
    else:
        print("\nüí• Certains tests ont √©chou√©!")
        sys.exit(1)
