#!/usr/bin/env python3
"""
Test des solutions d'erreurs avec Mistral AI
"""

import sys
import os
import time
from datetime import datetime

# Ajouter le chemin src pour les imports
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "..", "src"))

from cy8_mistral import analyze_comfyui_error, save_error_solution, load_error_solution


def test_mistral_functions():
    """Tester les nouvelles fonctions Mistral pour l'analyse d'erreurs"""
    print("ü§ñ Test des fonctions Mistral AI")
    print("=" * 50)

    # Test avec une erreur simul√©e
    test_timestamp = "2025-09-28 14:30:25.123"
    test_error = "ModuleNotFoundError: No module named 'torch_audio'"
    test_solutions_dir = "test_solutions"

    print(f"üìã Test avec erreur: {test_error}")
    print(f"üïê Timestamp: {test_timestamp}")
    print(f"üìÅ R√©pertoire test: {test_solutions_dir}")
    print()

    try:
        # Cr√©er le r√©pertoire de test
        os.makedirs(test_solutions_dir, exist_ok=True)

        # Test 1: V√©rifier qu'aucune solution n'existe
        existing = load_error_solution(test_timestamp, test_solutions_dir)
        if existing is None:
            print("‚úÖ Test 1: Aucune solution existante (attendu)")
        else:
            print("‚ö†Ô∏è  Test 1: Solution trouv√©e (inattendu)")

        # Test 2: Sauvegarder une solution de test
        test_solution = """ANALYSE D'ERREUR COMFYUI - TEST
========================================

EXPLICATION:
L'erreur ModuleNotFoundError indique qu'un module Python requis n'est pas install√©.

CAUSES POSSIBLES:
1. Module torch_audio non install√©
2. Environnement Python incorrect
3. D√©pendances manquantes

SOLUTIONS:
1. Installer le module: pip install torchaudio
2. V√©rifier l'environnement virtuel
3. R√©installer les d√©pendances ComfyUI

PR√âVENTION:
- Utiliser un requirements.txt
- V√©rifier l'environnement avant de lancer ComfyUI
"""

        saved_path = save_error_solution(
            test_timestamp, test_error, test_solution, test_solutions_dir
        )

        if saved_path:
            print(f"‚úÖ Test 2: Solution sauvegard√©e - {os.path.basename(saved_path)}")
        else:
            print("‚ùå Test 2: √âchec de la sauvegarde")
            return False

        # Test 3: Charger la solution sauvegard√©e
        loaded_solution = load_error_solution(test_timestamp, test_solutions_dir)

        if loaded_solution:
            print("‚úÖ Test 3: Solution charg√©e avec succ√®s")
            print(f"   üìÑ Taille: {len(loaded_solution)} caract√®res")
        else:
            print("‚ùå Test 3: √âchec du chargement")
            return False

        print()
        print("üéâ Tous les tests de base r√©ussis !")
        return True

    except Exception as e:
        print(f"‚ùå Erreur pendant le test: {e}")
        return False
    finally:
        # Nettoyer le r√©pertoire de test
        try:
            import shutil
            if os.path.exists(test_solutions_dir):
                shutil.rmtree(test_solutions_dir)
                print("üßπ R√©pertoire de test nettoy√©")
        except:
            pass


def test_interface_integration():
    """Tester l'int√©gration avec l'interface"""
    print("üñ•Ô∏è Test d'int√©gration interface")
    print("=" * 50)

    try:
        # Importer l'interface principale
        from cy8_prompts_manager_main import cy8_prompts_manager

        print("‚úÖ Import de l'interface r√©ussi")

        # Cr√©er l'application
        app = cy8_prompts_manager()

        # V√©rifier que les nouvelles m√©thodes existent
        required_methods = [
            'browse_solutions_directory',
            'display_cached_solution',
            'display_new_solution',
            'get_new_ai_solution',
            'save_current_solution',
            'open_solutions_folder'
        ]

        missing_methods = []
        for method in required_methods:
            if not hasattr(app, method):
                missing_methods.append(method)

        if missing_methods:
            print(f"‚ùå M√©thodes manquantes: {missing_methods}")
            return False
        else:
            print("‚úÖ Toutes les m√©thodes n√©cessaires pr√©sentes")

        # V√©rifier que la variable du r√©pertoire existe
        if hasattr(app, 'error_solutions_dir'):
            print("‚úÖ Variable error_solutions_dir pr√©sente")
            default_dir = app.error_solutions_dir.get()
            print(f"   üìÅ R√©pertoire par d√©faut: {default_dir}")
        else:
            print("‚ùå Variable error_solutions_dir manquante")
            return False

        # V√©rifier les pr√©f√©rences
        prefs_info = app.user_prefs.get_preferences_info()
        if 'error_solutions_directory' in prefs_info:
            print("‚úÖ Pr√©f√©rence error_solutions_directory configur√©e")
            print(f"   üìÅ Valeur: {prefs_info['error_solutions_directory']}")
        else:
            print("‚ùå Pr√©f√©rence error_solutions_directory manquante")
            return False

        return True

    except Exception as e:
        print(f"‚ùå Erreur d'int√©gration: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_filename_generation():
    """Tester la g√©n√©ration des noms de fichiers"""
    print("üìù Test de g√©n√©ration des noms de fichiers")
    print("=" * 50)

    test_timestamps = [
        "2025-09-28 14:30:25.123",
        "2025-09-28 14:30:26.45",
        "2025-09-28 14:30:27.789",
        "2025-09-28 14:30:28.00",
        "Invalid timestamp with spaces"
    ]

    for timestamp in test_timestamps:
        # Simuler la logique de nettoyage du nom de fichier
        safe_timestamp = timestamp.replace(":", "-").replace(" ", "_").replace(".", "-")
        expected_filename = f"error_solution_{safe_timestamp}.txt"

        print(f"   Timestamp: {timestamp}")
        print(f"   Fichier: {expected_filename}")
        print()

    print("‚úÖ G√©n√©ration des noms de fichiers test√©e")
    return True


if __name__ == "__main__":
    print("üß™ TESTS DES SOLUTIONS D'ERREURS AVEC MISTRAL AI")
    print("=" * 60)

    success = True

    # Test 1: Fonctions Mistral de base
    success &= test_mistral_functions()
    print()

    # Test 2: G√©n√©ration des noms de fichiers
    success &= test_filename_generation()
    print()

    # Test 3: Int√©gration interface
    success &= test_interface_integration()
    print()

    if success:
        print("üéâ TOUS LES TESTS R√âUSSIS !")
        print("‚ú® Fonctionnalit√©s ajout√©es:")
        print("   ‚Ä¢ Double-clic sur erreurs pour solutions IA")
        print("   ‚Ä¢ Cache des solutions par timestamp")
        print("   ‚Ä¢ Configuration du r√©pertoire de sauvegarde")
        print("   ‚Ä¢ Interface compl√®te avec Mistral AI")
        print("   ‚Ä¢ Gestion automatique des fichiers de solutions")
    else:
        print("‚ùå CERTAINS TESTS ONT √âCHOU√â")
        print("üîß V√©rifiez l'impl√©mentation des solutions IA")
