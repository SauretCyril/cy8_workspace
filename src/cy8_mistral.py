import requests
import sys
import os
import time
from dotenv import load_dotenv
from datetime import datetime


def get_mistral_answer(question, role, texte):
    try:
        # Charger le fichier .env
        load_dotenv()

        # R√©cup√©rer la cl√© API Mistral depuis les variables d'environnement
        print(f"Python utilis√© dans cy_mistral.py : {sys.executable}")
        api_key = os.getenv("MISTRAL_API_KEY")

        if not api_key:
            raise ValueError(
                "La cl√© API Mistral n'est pas d√©finie dans le fichier .env"
            )

        # Construire les messages pour l'API
        messages = [
            {"role": "system", "content": role},
            {"role": "user", "content": f"Contenu: {texte}\n\nQuestion: {question}"},
        ]

        # Configuration de la requ√™te √† l'API Mistral
        url = "https://api.mistral.ai/v1/chat/completions"
        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json",
        }

        # Donn√©es √† envoyer √† l'API Mistral
        data = {
            "model": "mistral-medium",
            "messages": messages,
            "temperature": 0.7,
            "max_tokens": 9000,  # Augmenter cette valeur (√©tait 5000)
        }

        # Appel √† l'API Mistral
        time.sleep(10)
        response = requests.post(url, headers=headers, json=data)
        response.raise_for_status()  # Ajoute cette ligne
        response_json = response.json()
        if "choices" in response_json and response_json["choices"]:
            content = response_json["choices"][0]["message"]["content"]
            print(f"dbg-678 : R√©ponse de l'API Mistral: {content}")
            return content
        else:
            # Retourner le message d'erreur de l'API si pr√©sent
            error_msg = response_json.get(
                "error", "R√©ponse inattendue de l'API Mistral"
            )
            return f'{{"error": "{error_msg}"}}'
    except requests.exceptions.HTTPError as e:
        if e.response is not None and e.response.status_code == 429:
            print(f"dbg-678 : Trop de requ√™tes envoy√©es √† l'API Mistral: {e}")
            return '{"error": "Trop de requ√™tes envoy√©es √† l\'API Mistral. Merci de patienter avant de r√©essayer."}'
        else:
            print(f"dbg-678 : Erreur de l'API Mistral: {e}")
            return f'{{"error": "Erreur lors de l\'appel √† l\'API Mistral: {str(e)}"}}'
    except Exception as e:
        print(f"dbg-678 : Erreur inattendue: {e}")
        return f'{{"error": "Erreur lors de l\'appel √† l\'API Mistral: {str(e)}"}}'


def analyze_comfyui_error(error_line, error_context="", timestamp=""):
    """
    Analyser une erreur ComfyUI avec Mistral AI

    Args:
        error_line: La ligne d'erreur extraite du log
        error_context: Contexte additionnel autour de l'erreur
        timestamp: Timestamp de l'erreur

    Returns:
        str: Solution propos√©e par Mistral AI
    """
    role = (
        "Tu es un assistant expert Python et ComfyUI. Tu analyses les erreurs des logs ComfyUI "
        "et tu proposes des solutions claires et d√©taill√©es. Tu dois expliquer l'erreur de fa√ßon "
        "compr√©hensible et donner des √©tapes concr√®tes pour la r√©soudre."
    )

    question = (
        f"Aide-moi √† comprendre cette erreur du log ComfyUI et propose une solution:\n\n"
        f"Timestamp: {timestamp}\n"
        f"Ligne d'erreur: {error_line}\n"
        f"Contexte: {error_context}\n\n"
        f"Merci de fournir:\n"
        f"1. Explication de l'erreur\n"
        f"2. Causes possibles\n"
        f"3. Solutions √©tape par √©tape\n"
        f"4. Conseils de pr√©vention"
    )

    # Utiliser la fonction existante avec le contexte sp√©cialis√©
    response = get_mistral_answer(question, role, error_line)

    return response


def save_error_solution(timestamp, error_line, solution, solutions_dir):
    """
    Sauvegarder l'erreur et sa solution dans un fichier

    Args:
        timestamp: Timestamp de l'erreur pour le nom du fichier
        error_line: Ligne d'erreur originale
        solution: Solution propos√©e par Mistral AI
        solutions_dir: R√©pertoire o√π sauvegarder le fichier

    Returns:
        str: Chemin du fichier cr√©√© ou None si erreur
    """
    try:
        # Cr√©er le r√©pertoire s'il n'existe pas
        os.makedirs(solutions_dir, exist_ok=True)

        # Nettoyer le timestamp pour le nom de fichier (remplacer caract√®res interdits)
        safe_timestamp = timestamp.replace(":", "-").replace(" ", "_").replace(".", "-")
        filename = f"error_solution_{safe_timestamp}.txt"
        filepath = os.path.join(solutions_dir, filename)

        # Contenu du fichier
        content = f"""ANALYSE D'ERREUR COMFYUI
=======================
Timestamp: {timestamp}
Date d'analyse: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

ERREUR ORIGINALE:
{error_line}

SOLUTION PROPOS√âE:
{solution}

---
G√©n√©r√© automatiquement par cy8_prompts_manager avec Mistral AI
"""

        # √âcrire le fichier
        with open(filepath, "w", encoding="utf-8") as f:
            f.write(content)

        print(f"Solution sauvegard√©e: {filepath}")
        return filepath

    except Exception as e:
        print(f"Erreur lors de la sauvegarde: {e}")
        return None


def load_error_solution(timestamp, solutions_dir):
    """
    Charger une solution existante depuis un fichier

    Args:
        timestamp: Timestamp de l'erreur
        solutions_dir: R√©pertoire o√π chercher le fichier

    Returns:
        str: Contenu du fichier ou None si non trouv√©
    """
    try:
        # Nettoyer le timestamp pour le nom de fichier
        safe_timestamp = timestamp.replace(":", "-").replace(" ", "_").replace(".", "-")
        filename = f"error_solution_{safe_timestamp}.txt"
        filepath = os.path.join(solutions_dir, filename)

        if os.path.exists(filepath):
            with open(filepath, "r", encoding="utf-8") as f:
                content = f.read()
            print(f"Solution charg√©e: {filepath}")
            return content

        return None

    except Exception as e:
        print(f"Erreur lors du chargement: {e}")
        return None


def analyze_comfyui_log_complete(log_content, question, role):
    """
    Analyser un log ComfyUI complet avec Mistral AI

    Args:
        log_content: Contenu complet du log
        question: Question √† poser √† Mistral AI
        role: R√¥le/contexte pour Mistral AI

    Returns:
        str: Analyse compl√®te du log par Mistral AI
    """
    try:
        print("D√©marrage de l'analyse compl√®te du log ComfyUI...")

        # Tronquer le log si trop long (pour √©viter les limites de l'API)
        max_chars = 50000  # Limite raisonnable pour l'API
        if len(log_content) > max_chars:
            print(f"Log tronqu√© de {len(log_content)} √† {max_chars} caract√®res")
            log_content = log_content[
                -max_chars:
            ]  # Prendre la fin du log (plus r√©cent)
            log_content = "[...LOG TRONQU√â...]\n" + log_content

        # Am√©liorer le contexte pour l'analyse compl√®te
        enhanced_role = f"{role}. Tu analyses un log ComfyUI complet pour identifier TOUTES les erreurs, leur contexte, leurs causes possibles et proposer des solutions d√©taill√©es. Sois m√©thodique et exhaustif."

        enhanced_question = f"""Analyse compl√®te de ce log ComfyUI:

{question}

Instructions sp√©cifiques:
1. Identifie TOUTES les erreurs pr√©sentes dans le log
2. Analyse le contexte global et la s√©quence des √©v√©nements
3. Explique les causes probables de chaque erreur
4. Propose des solutions concr√®tes et d√©taill√©es
5. Donne des recommandations pour √©viter ces probl√®mes √† l'avenir
6. Structure ta r√©ponse de mani√®re claire avec des sections distinctes

Format de r√©ponse souhait√©:
üìä R√âSUM√â EX√âCUTIF
üîç ERREURS IDENTIFI√âES
‚ö†Ô∏è ANALYSE DES CAUSES
üí° SOLUTIONS PROPOS√âES
üîß RECOMMANDATIONS
"""

        # Appeler l'API Mistral
        result = get_mistral_answer(enhanced_question, enhanced_role, log_content)

        if result:
            print("Analyse compl√®te termin√©e avec succ√®s")
            return result
        else:
            return "‚ùå Erreur lors de l'analyse : Aucune r√©ponse re√ßue de Mistral AI"

    except Exception as e:
        error_msg = f"‚ùå Erreur lors de l'analyse compl√®te du log : {str(e)}"
        print(error_msg)
        return error_msg
